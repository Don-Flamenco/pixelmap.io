apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "chart.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: backend-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Namespace }}-backend-claim
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image }}"
          env:
          - name: AWS_ACCESS_KEY_ID
            value: "{{ .Values.AWS_ACCESS_KEY_ID }}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{ .Values.AWS_SECRET_ACCESS_KEY }}"
          - name: DATABASE_USERNAME
            value: "{{ .Values.DATABASE_USERNAME }}"
          - name: DATABASE_PASSWORD
            value: "{{ .Values.DATABASE_PASSWORD }}"
          - name: DATABASE_NAME
            value: "{{ .Values.DATABASE_NAME }}"
          - name: DATABASE_HOST
            value: "{{ .Values.DATABASE_HOST }}"
          - name: DISCORD_TOKEN
            value: "{{ .Values.DISCORD_TOKEN }}"
          - name: ETHERSCAN_API_KEY
            value: "{{ .Values.ETHERSCAN_API_KEY }}"
          - name: OPENSEA_API_KEY
            value: "{{ .Values.OPENSEA_API_KEY }}"
          - name: SYNC_TO_AWS
            value: "false"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
          volumeMounts:
            - mountPath: "/cache"
              name: backend-storage
          livenessProbe:
            httpGet:
              path: /tiledata
              port: http
          readinessProbe:
            httpGet:
              path: /tiledata
              port: http

